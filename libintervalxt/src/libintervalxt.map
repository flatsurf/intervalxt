# This file controls which symbols libintervalxt exports on Linux.
LIBINTERVALXT_3.1.4 {
  global:
    extern "C++" {
      "intervalxt::Component::bottom() const";
      "intervalxt::Component::bottomContour() const";
      "intervalxt::Component::bottomContour(intervalxt::Label) const";
      "intervalxt::Component::cylinder() const";
      "intervalxt::Component::decompose(std::function<bool (intervalxt::Component const&)>, int)";
      "intervalxt::Component::decompositionStep(int)";
      "intervalxt::Component::iet() const";
      "intervalxt::Component::inject[abi:cxx11](intervalxt::HalfEdge const&, std::vector<std::pair<intervalxt::Label, intervalxt::Label>, std::allocator<std::pair<intervalxt::Label, intervalxt::Label> > > const&, std::vector<std::pair<intervalxt::Label, intervalxt::Label>, std::allocator<std::pair<intervalxt::Label, intervalxt::Label> > > const&)";
      "intervalxt::Component::keane() const";
      "intervalxt::Component::left() const";
      "intervalxt::Component::operator==(intervalxt::Component const&) const";
      "intervalxt::Component::perimeter() const";
      "intervalxt::Component::right() const";
      "intervalxt::Component::top() const";
      "intervalxt::Component::topContour() const";
      "intervalxt::Component::topContour(intervalxt::Label) const";
      "intervalxt::Component::withoutPeriodicTrajectory() const";
      "intervalxt::operator<<(std::ostream&, intervalxt::Component const&)";
      "intervalxt::Connection::antiparallel() const";
      "intervalxt::Connection::operator-() const";
      "intervalxt::Connection::operator==(intervalxt::Connection const&) const";
      "intervalxt::Connection::parallel() const";
      "intervalxt::Connection::source() const";
      "intervalxt::Connection::target() const";
      "intervalxt::operator<<(std::ostream&, intervalxt::Connection const&)";
      "std::hash<intervalxt::Connection>::operator()(intervalxt::Connection const&) const";
      "intervalxt::operator<<(std::ostream&, std::variant<intervalxt::Connection, intervalxt::HalfEdge> const&)";
      "intervalxt::HalfEdge::bottom() const";
      "intervalxt::HalfEdge::component() const";
      "intervalxt::HalfEdge::cross[abi:cxx11]() const";
      "intervalxt::HalfEdge::left[abi:cxx11]() const";
      "intervalxt::HalfEdge::next() const";
      "intervalxt::HalfEdge::operator intervalxt::Label() const";
      "intervalxt::HalfEdge::operator-() const";
      "intervalxt::HalfEdge::operator==(intervalxt::HalfEdge const&) const";
      "intervalxt::HalfEdge::previous() const";
      "intervalxt::HalfEdge::right[abi:cxx11]() const";
      "intervalxt::HalfEdge::separatrix() const";
      "intervalxt::HalfEdge::top() const";
      "intervalxt::operator<<(std::ostream&, intervalxt::HalfEdge const&)";
      "std::hash<intervalxt::HalfEdge>::operator()(intervalxt::HalfEdge const&) const";
      "intervalxt::DynamicalDecomposition::DynamicalDecomposition(intervalxt::IntervalExchangeTransformation const&)";
      "intervalxt::DynamicalDecomposition::components() const";
      "intervalxt::DynamicalDecomposition::decompose(std::function<bool (intervalxt::Component const&)>, int)";
      "intervalxt::DynamicalDecomposition::operator==(intervalxt::DynamicalDecomposition const&) const";
      "intervalxt::operator<<(std::ostream&, intervalxt::DynamicalDecomposition const&)";
      "intervalxt::IntervalExchangeTransformation::IntervalExchangeTransformation()";
      "intervalxt::IntervalExchangeTransformation::IntervalExchangeTransformation(std::shared_ptr<boost::type_erasure::any<intervalxt::LengthsInterface, boost::type_erasure::_self> >, std::vector<intervalxt::Label, std::allocator<intervalxt::Label> > const&, std::vector<intervalxt::Label, std::allocator<intervalxt::Label> > const&)";
      "intervalxt::IntervalExchangeTransformation::boshernitzanNoPeriodicTrajectory() const";
      "intervalxt::IntervalExchangeTransformation::bottom() const";
      "intervalxt::IntervalExchangeTransformation::equivalent(intervalxt::IntervalExchangeTransformation const&) const";
      "intervalxt::IntervalExchangeTransformation::induce(int)";
      "intervalxt::IntervalExchangeTransformation::lengths() const";
      "intervalxt::IntervalExchangeTransformation::operator==(intervalxt::IntervalExchangeTransformation const&) const";
      "intervalxt::IntervalExchangeTransformation::reduce()";
      "intervalxt::IntervalExchangeTransformation::safInvariant() const";
      "intervalxt::IntervalExchangeTransformation::size() const";
      "intervalxt::IntervalExchangeTransformation::swap()";
      "intervalxt::IntervalExchangeTransformation::swapped() const";
      "intervalxt::IntervalExchangeTransformation::top() const";
      "intervalxt::IntervalExchangeTransformation::zorichInduction()";
      "intervalxt::operator<<(std::ostream&, intervalxt::IntervalExchangeTransformation const&)";
      "intervalxt::Label::Label()";
      "intervalxt::Label::Label(unsigned long)";
      "intervalxt::Label::operator==(intervalxt::Label const&) const";
      "std::hash<intervalxt::Label>::operator()(intervalxt::Label const&) const";
      "intervalxt::Separatrix::antiparallel() const";
      "intervalxt::Separatrix::operator==(intervalxt::Separatrix const&) const";
      "intervalxt::Separatrix::parallel() const";
      "intervalxt::operator<<(std::ostream&, intervalxt::Separatrix const&)";
      "std::hash<intervalxt::Separatrix>::operator()(intervalxt::Separatrix const&) const";
      "intervalxt::operator<<(std::ostream&, intervalxt::DecompositionStep const&)";
      "intervalxt::operator<<(std::ostream&, intervalxt::InductionStep const&)";
    };
  local: *;
};
LIBINTERVALXT_3.3.0 {
  global:
    extern "C++" {
      "intervalxt::operator<<(std::ostream&, intervalxt::Label const&)";
      "intervalxt::IntervalExchangeTransformation::boshernitzanNoSaddleConnection() const";
      "intervalxt::IntervalExchangeTransformation::boshernitzanNoSaddleConnection(intervalxt::Label const&, intervalxt::Label const&) const";
      "intervalxt::IntervalExchangeTransformation::boshernitzanEquations() const";
      "intervalxt::IntervalExchangeTransformation::boshernitzanSaddleConnectionValues(intervalxt::Label const&, intervalxt::Label const&) const";
    };
} LIBINTERVALXT_3.1.4;
