name: Test
on:
  push: { branches: [ "master" ] }
  pull_request: { branches: [ "master" ] }

jobs:
  test-libintervalxt:
    runs-on: ${{ matrix.on }}
    strategy:
      matrix:
        include:
        - on: Ubuntu-20.04
        - on: Ubuntu-20.04
          environment: binder
        - on: Ubuntu-20.04
          sanitizer: valgrind
    steps:
      - uses: actions/checkout@v2
        with: { submodules: recursive }
      - name: build flags
        id: flags
        run: |
          echo "::set-output name=configure::"`[[ ${{ runner.os }} == "Linux" ]] && echo "--with-version-script"`
      - uses: conda-incubator/setup-miniconda@v2
        with: { mamba-version: "*", channels: "flatsurf,conda-forge", channel-priority: true }
      - name: install valgrind
        run: |
          mamba install valgrind
        if: ${{ matrix.sanitizer == 'valgrind' }}
      - name: install dependencies
        shell: bash -l {0}
        run: |
          mamba env update --quiet -n test -f libintervalxt/environment.yml
          conda list
        if: ${{ matrix.environment != 'binder' }}
      - name: Create binder environment
        shell: bash -l {0}
        run: |
          wget -O repo2docker.yml https://github.com/jupyterhub/repo2docker/raw/main/repo2docker/buildpacks/conda/environment.yml
          mamba install -n test --quiet -y pytest pytest-xdist byexample
          mamba env update -n test --quiet -f repo2docker.yml
          mamba env update -n test --quiet -f binder/environment.yml
          conda list
        if: ${{ matrix.environment == 'binder' }}
      - name: configure & build & test
        shell: bash -l {0}
        run: |
          echo "::group::bootstrap"
          cd libintervalxt
          ./bootstrap

          echo "::group::configure"
          export CXXFLAGS="$CXXFLAGS -UNDEBUG -g3 -fvisibility=hidden -fvisibility-inlines-hidden"
          ./configure --prefix="$PREFIX" --without-benchmark ${{ steps.flags.outputs.configure }}

          echo "::group::make"
          make V=1

          echo "::group::test"
          make V=1 `[[ "${{ matrix.sanitizer }}" == "valgrind" ]] && echo check-valgrind || echo check`
      - name: show logs
        shell: bash -l {0}
        run: for log in `find . -name '*.log'`; do echo "::group::$log"; cat $log; echo "::endgroup"; done
        if: ${{ always() }}
  test-pyintervalxt:
    runs-on: ${{ matrix.on }}
    strategy:
      matrix:
        include:
        - on: ubuntu-20.04
          python: "3.6"
        - on: ubuntu-20.04
          python: "3.7"
        - on: ubuntu-20.04
          python: "3.8"
        - on: ubuntu-20.04
          python: "3.9"
        - on: ubuntu-20.04
          python: "3.7"
          environment: binder
        - on: ubuntu-20.04
          python: "3.9"
          sanitizer: valgrind
    steps:
      - uses: actions/checkout@v2
        with: { submodules: recursive }
      - name: build flags
        id: flags
        run: |
          echo "::set-output name=configure::"`[[ ${{ runner.os }} == "Linux" ]] && echo "--with-version-script"`
      - uses: conda-incubator/setup-miniconda@v2
        with: { mamba-version: "*", channels: "flatsurf,conda-forge", python-version: "${{ matrix.python }}", channel-priority: true }
      - name: install valgrind
        run: |
          mamba install valgrind
        if: ${{ matrix.sanitizer == 'valgrind' }}
      - name: install dependencies
        shell: bash -l {0}
        run: |
          mamba env update --quiet -n test -f libintervalxt/environment.yml
          mamba env update --quiet -n test -f pyintervalxt/environment.yml
          conda list
        if: ${{ matrix.environment != 'binder' }}
      - name: Create binder environment
        shell: bash -l {0}
        run: |
          wget -O repo2docker.yml https://github.com/jupyterhub/repo2docker/raw/main/repo2docker/buildpacks/conda/environment.yml
          mamba install -n test --quiet -y pytest pytest-xdist byexample
          mamba env update -n test --quiet -f repo2docker.yml
          mamba env update -n test --quiet -f binder/environment.yml
          conda list
        if: ${{ matrix.environment == 'binder' }}
      - name: configure & make & test
        shell: bash -l {0}
        run: |
          echo "::group::bootstrap"
          ./bootstrap

          echo "::group::configure"
          export CXXFLAGS="$CXXFLAGS -UNDEBUG -g3 -fvisibility=hidden -fvisibility-inlines-hidden"
          ./configure --prefix="$PREFIX" --without-benchmark ${{ steps.flags.outputs.configure }}

          echo "::group::make"
          make V=1

          echo "::group::test"
          cd pyintervalxt
          make V=1 `[[ "${{ matrix.sanitizer }}" == "valgrind" ]] && echo check-valgrind || echo check`
      - name: show logs
        shell: bash -l {0}
        run: for log in `find . -name '*.log'`; do echo "::group::$log"; cat $log; echo "::endgroup"; done
        if: ${{ always() }}
  distcheck:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with: { submodules: recursive }
      - uses: conda-incubator/setup-miniconda@v2
        with: { mamba-version: "*", channels: "flatsurf,conda-forge", channel-priority: true }
      - name: install dependencies
        shell: bash -l {0}
        run: |
          mamba env update --quiet -n test -f libintervalxt/environment.yml
          mamba env update --quiet -n test -f pyintervalxt/environment.yml
          conda list
      - name: make distcheck
        shell: bash -l {0}
        run: |
          ./bootstrap
          ./configure --prefix="$PREFIX"
          make distcheck
      - name: show logs
        shell: bash -l {0}
        run: for log in `find . -name '*.log'`; do echo "::group::$log"; cat $log; echo "::endgroup"; done
        if: ${{ always() }}

env:
  MAKEFLAGS: -j2
