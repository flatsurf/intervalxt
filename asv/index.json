{"project": "intervalxt", "project_url": "https://github.com/flatsurf/intervalxt", "show_commit_url": "https://github.com/flatsurf/intervalxt/commit/", "hash_length": 8, "revision_to_hash": {"0": "555b41d15df5ad6025437944480788713e8d66fc"}, "revision_to_date": {"0": 1632152441000}, "params": {"arch": ["x86_64"], "cpu": ["Standard_DS2_v2"], "machine": ["Azure"], "os": ["Linux"], "ram": ["61830880"], "python": ["", "3.7"], "Cython": ["", null], "automake": [""], "benchmark==1.4.1": ["", null], "boost-cpp": [""], "e-antic": [""], "gmp": [""], "gtest": ["", null], "libtool": [""], "make": [""], "benchmark==1.5.0": [""], "ccache": [""], "coreutils": [""], "cppasv": [""], "cppyy": [""], "cppyythonizations": [""], "cxx-compiler": [""], "fmt": [""], "gmpxxll": [""], "gmpxxyy": [""], "libexactreal": [""], "libflint": [""], "ppl": [""], "pyexactreal>=1.3.2": [""], "pytest": [""], "setuptools": [""], "branch": ["master"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Standard_DS2_v2", "machine": "Azure", "os": "Linux", "ram": "61830880", "python": "", "automake": "", "benchmark==1.5.0": "", "boost-cpp": "", "ccache": "", "coreutils": "", "cppasv": "", "cppyy": "", "cppyythonizations": "", "cxx-compiler": "", "e-antic": "", "fmt": "", "gmp": "", "gmpxxll": "", "gmpxxyy": "", "libexactreal": "", "libflint": "", "libtool": "", "make": "", "ppl": "", "pyexactreal>=1.3.2": "", "pytest": "", "setuptools": "", "branch": "master", "Cython": null, "benchmark==1.4.1": null, "gtest": null}], "benchmarks": {"HasNonZeroNonNegativeVector.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "HasNonZeroNonNegativeVector.track_time", "param_names": [], "params": [], "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "Induction\u27e8int\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "Induction\u27e8int\u27e9.track_time", "param_names": ["param1"], "params": [["'8'", "'34'"]], "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}}, "machines": {"Azure": {"arch": "x86_64", "cpu": "Standard_DS2_v2", "machine": "Azure", "os": "Linux", "ram": "61830880", "version": 1}}, "tags": {}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}